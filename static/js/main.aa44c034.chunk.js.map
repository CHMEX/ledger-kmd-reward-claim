{"version":3,"sources":["lib/update-action-state.js","constants.js","App.js","Header.js","WarnU2fCompatibility.js","Footer.js","lib/human-readable-satoshis.js","lib/get-reward-end-date.js","lib/human-reward-end-date.js","Utxos.js","ClaimRewardsButton.js","Accounts.js","lib/account-discovery.js","CheckRewardsButton.js","index.js","lib/blockchain.js","lib/ledger.js","lib/get-address.js","lib/get-komodo-rewards.js","ActionListModal.js","Modal.js","Boolean.js"],"names":["updateActionState","context","action","value","setState","prevState","Object","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","actions","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","state","__webpack_require__","d","__webpack_exports__","SERVICE_FEE_ADDRESS","SERVICE_FEE_PERCENT","TX_FEE","INSIGHT_API_URL","KOMODO","messagePrefix","bip32","public","private","pubKeyHash","scriptHash","wif","App","_this","initialState","resetState","handleRewardData","_ref","accounts","tiptime","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_Header__WEBPACK_IMPORTED_MODULE_7__","_CheckRewardsButton__WEBPACK_IMPORTED_MODULE_8__","this","onClick","length","src","alt","_Accounts__WEBPACK_IMPORTED_MODULE_9__","_WarnU2fCompatibility__WEBPACK_IMPORTED_MODULE_10__","_Footer__WEBPACK_IMPORTED_MODULE_11__","target","rel","href","React","Component","hot","module","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_svgr_webpack_prettier_svgo_cryptocurrency_icons_svg_color_kmd_svg__WEBPACK_IMPORTED_MODULE_1__","Header","children","role","aria-label","WarnU2fCompatibility","u2fSupported","isSupported","react__WEBPACK_IMPORTED_MODULE_7___default","_Modal__WEBPACK_IMPORTED_MODULE_9__","title","show","Footer","humanReadableSatoshis","satoshis","scientificToDecimal","toBitcoin","getRewardEndDate","locktime","height","humanRewardEndDate","utxo","endDate","getRewardEndDateTimestamp","distanceInWordsToNow","addSuffix","Utxos","utxos","headings","react_default","map","heading","key","id","address","Boolean","getKomodoRewards","objectSpread","ClaimRewardsButton","getUnusedAddressIndex","props","account","addresses","filter","isChange","getUnusedAddress","getAddress","externalNode","derive","publicKey","getOutputs","_this$props$account","balance","claimableAmount","serviceFee","outputs","push","claimRewards","_callee","_this$props$account2","accountIndex","currentAction","unusedAddress","derivationPath","ledgerUnusedAddress","rewardClaimTransaction","regenerator_default","wrap","_context","prev","next","isClaimingRewards","assertThisInitialized","ledger","isAvailable","sent","Error","concat","createTransaction","blockchain","broadcast","t0","error","message","stop","_this$state","isClaimableAmount","_this$getOutputs","_this$getOutputs2","slicedToArray","userOutput","feeOutput","Fragment","disabled","ActionListModal","handleClose","connect","icon","description","confirmAddress","approveTransaction","broadcastTransaction","Account","_this$props","rewards","Math","max","src_Utxos","src_ClaimRewardsButton","Accounts","Accounts_Account","walkDerivationPath","asyncToGenerator","mark","node","addressConcurrency","gapLimit","consecutiveUnusedAddresses","addressIndex","addressApiRequests","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_address","undefined","Promise","all","Symbol","iterator","done","totalReceived","unconfirmedBalance","t1","return","finish","abrupt","slice","_x","apply","arguments","getAccountAddresses","_ref2","_callee2","xpub","internalNode","_ref3","_ref4","externalAddresses","internalAddresses","addAddressMeta","_context2","getXpub","bitcoin","fromBase58","_ref5","toConsumableArray","_x2","getAddressUtxos","_ref6","_callee4","_context4","getUtxos","_ref7","_callee3","addressInfo","_ref8","_ref9","rawtx","_context3","find","getRawTransaction","txid","getTransaction","vout","_x4","_x3","accountDiscovery","_ref10","_callee5","_context5","CheckRewardsButton","calculateRewardData","reduce","floor","scanAddresses","isCheckingRewards","getTipTime","approve","r","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_4__","ReactDOM","render","document","getElementById","get","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","endpoint","postData","opts","response","body","JSON","stringify","headers","Headers","append","method","fetch","includes","json","text","ok","getBestBlockHash","getBlock","blockHash","bestblockhash","block","time","addrs","join","transaction","getDevice","transport","TransportU2F","create","Btc","close","getWalletPublicKey","verify","bitcoinAddress","inputs","associatedKeysets","outputScript","additionals","tx","splitTransaction","_x5","buildOutputScript","createPaymentTransactionNew","_callee6","chainCode","pathArray","depth","childNumber","_context6","bip32Path","fromString","toPathArray","pop","createXpub","_x6","_constants__WEBPACK_IMPORTED_MODULE_0__","bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_1__","bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_1___default","payments","p2pkh","pubkey","network","coinage","limit","rewardPeriod","min","_ref$actions","modalProps","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","_Modal__WEBPACK_IMPORTED_MODULE_2__","assign","isCloseable","keys","_actions$action","_Boolean__WEBPACK_IMPORTED_MODULE_3__","aria-hidden","Modal"],"mappings":"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","file":"static/js/main.aa44c034.chunk.js","sourcesContent":["const updateActionState = (context, action, value) => {\n  context.setState(prevState => ({\n    ...prevState,\n    actions: {\n      ...prevState.actions,\n      [action]: {\n        ...prevState.actions[action],\n        state: value\n      }\n    }\n  }));\n};\nexport default updateActionState;\n","export const SERVICE_FEE_ADDRESS = 'RLQH7v4iJREbUHQJ6x6s2eUNJnYyzD2Foq';\nexport const SERVICE_FEE_PERCENT = 5;\nexport const TX_FEE = 20000;\nexport const INSIGHT_API_URL = 'https://insight.hyperdex.app/insight-api-komodo/';\nexport const KOMODO = {\n  messagePrefix: '\\x18Komodo Signed Message:\\n',\n  bip32: {\n    public: 0x0488B21E,\n    private: 0x0488ADE4\n  },\n  pubKeyHash: 0x3C,\n  scriptHash: 0x55,\n  wif: 0xBC\n};\n","import React from 'react';\nimport {hot} from 'react-hot-loader';\nimport Header from './Header';\nimport CheckRewardsButton from './CheckRewardsButton';\nimport Accounts from './Accounts';\nimport WarnU2fCompatibility from './WarnU2fCompatibility';\nimport Footer from './Footer';\nimport './App.scss';\n\nclass App extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      accounts: [],\n      tiptime: null\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  handleRewardData = ({accounts, tiptime}) => {\n    this.setState({accounts, tiptime});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header>\n          <div className=\"buttons\">\n            <CheckRewardsButton handleRewardData={this.handleRewardData}>\n              <strong>Check Rewards</strong>\n            </CheckRewardsButton>\n            <button className=\"button is-light\" onClick={this.resetState}>\n              Reset\n            </button>\n          </div>\n        </Header>\n\n        <section className=\"main\">\n          {this.state.accounts.length === 0 ? (\n            <img className=\"ledger-graphic\" src=\"ledger.svg\" alt=\"Ledger Nano S\"/>\n          ) : (\n            <Accounts {...this.state} />\n          )}\n        </section>\n\n        <WarnU2fCompatibility />\n\n        <Footer>\n          <p>\n            <strong>Ledger KMD Reward Claim</strong> by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/atomiclabs\">Atomic Labs</a>.\n            The <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/atomiclabs/komodo-ledger-reward-claim\">source code</a> is licensed under <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/atomiclabs/komodo-ledger-reward-claim/blob/master/LICENSE\">MIT</a>.\n          </p>\n        </Footer>\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","import React from 'react';\nimport { ReactComponent as KmdIcon } from 'cryptocurrency-icons/svg/color/kmd.svg';\nimport './Header.scss';\n\nconst Header = ({children}) => (\n  <nav className=\"Header navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n    <div className=\"container\">\n\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item\">\n          <KmdIcon className=\"KmdIcon\"/>\n        </div>\n        <h1 className=\"navbar-item\">\n          <strong>Ledger KMD Reward Claim</strong>\n        </h1>\n      </div>\n\n      <div className=\"navbar-menu\">\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            {children}\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </nav>\n);\n\nexport default Header;\n","import React from 'react';\nimport {isSupported} from 'u2f-api';\nimport Modal from './Modal';\n\nclass WarnU2fCompatibility extends React.Component {\n  state = {\n    u2fSupported: null\n  };\n\n  async componentDidMount() {\n    this.setState({u2fSupported: await isSupported()});\n  }\n\n  render() {\n    return (\n      <Modal title=\"Warning: U2F Not Supported in This Browser\" show={this.state.u2fSupported === false}>\n        <p>The U2F API is required for the web browser to communicate with the Ledger device.</p>\n        <p>Try using Chrome or Opera instead.</p>\n        <p>You can view a list of U2F supporting browsers at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://caniuse.com/#feat=u2f\">caniuse.com/#feat=u2f</a>.</p>\n      </Modal>\n    );\n  }\n}\n\nexport default WarnU2fCompatibility;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = ({children}) => (\n  <footer className=\"Footer\">\n    <div className=\"content has-text-centered\">\n      {children}\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import {toBitcoin} from 'satoshi-bitcoin';\nimport scientificToDecimal from 'scientific-to-decimal';\n\nconst humanReadableSatoshis = satoshis => scientificToDecimal(toBitcoin(satoshis));\n\nexport default humanReadableSatoshis;\n","const KOMODO_ENDOFERA = 7777777;\nconst LOCKTIME_THRESHOLD = 500000000;\nconst ONE_MONTH_CAP_HARDFORK = 1000000;\nconst ONE_SECOND = 1000;\nconst ONE_MONTH = 31 * 24 * 60 * 60 * ONE_SECOND;\nconst ONE_YEAR = 365 * 24 * 60 * 60 * ONE_SECOND;\n\nconst getRewardEndDate = ({locktime, height}) => {\n  // Return false if UTXO for rewards\n  if (\n    (height >= KOMODO_ENDOFERA) ||\n    (locktime < LOCKTIME_THRESHOLD) ||\n    (!height)\n  ) {\n    return false;\n  }\n\n  // Convert locktime to milliseconds\n  locktime = (locktime * ONE_SECOND);\n\n  // Get reward period\n  const rewardPeriod = (height >= ONE_MONTH_CAP_HARDFORK) ? ONE_MONTH : ONE_YEAR;\n\n  return locktime + rewardPeriod;\n};\n\nexport default getRewardEndDate;\n","import {distanceInWordsToNow} from 'date-fns';\nimport getRewardEndDateTimestamp from './get-reward-end-date';\n\nconst humanRewardEndDate = utxo => {\n  const endDate = getRewardEndDateTimestamp(utxo);\n\n  return endDate ? distanceInWordsToNow(endDate, {addSuffix: true}) : 'N/A';\n};\n\nexport default humanRewardEndDate;\n","import React from 'react';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport getKomodoRewards from './lib/get-komodo-rewards';\nimport humanRewardEndDate from './lib/human-reward-end-date';\nimport Boolean from './Boolean';\n\nconst Utxos = ({utxos, tiptime}) => {\n  const headings = ['Address', 'Value', 'Locktime', 'Rewards', 'Rewards Stop Accruing'];\n\n\n  return (\n    <table className=\"table is-striped\">\n      <thead>\n        <tr>\n          {headings.map(heading => <th key={heading}>{heading}</th>)}\n        </tr>\n      </thead>\n      <tfoot>\n        <tr>\n          {headings.map(heading => <th key={heading}>{heading}</th>)}\n        </tr>\n      </tfoot>\n      <tbody>\n        {utxos.map(utxo => (\n          <tr key={utxo.id} className=\"utxo\">\n            <th>{utxo.address}</th>\n            <td>{humanReadableSatoshis(utxo.satoshis)} KMD</td>\n            <td><Boolean value={utxo.locktime} /></td>\n            <td>{humanReadableSatoshis(getKomodoRewards({tiptime, ...utxo}))} KMD</td>\n            <td>{humanRewardEndDate(utxo)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Utxos;\n","import React from 'react';\nimport ActionListModal from './ActionListModal';\nimport ledger from './lib/ledger';\nimport blockchain from './lib/blockchain';\nimport getAddress from './lib/get-address';\nimport updateActionState from './lib/update-action-state';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport {SERVICE_FEE_PERCENT, SERVICE_FEE_ADDRESS} from './constants';\n\nclass ClaimRewardsButton extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      isClaimingRewards: false,\n      error: false,\n      actions: {\n        connect: {\n          icon: 'fab fa-usb',\n          description: <div>Connect and unlock your Ledger, then open the Komodo app on your device.</div>,\n          state: null\n        },\n        confirmAddress: {\n          icon: 'fas fa-search-dollar',\n          description: <div>Confirm the address on your device matches the new unused address shown above.</div>,\n          state: null\n        },\n        approveTransaction: {\n          icon: 'fas fa-key',\n          description: <div>Approve the transaction on your device after carefully checking the values and addresses match those shown above.</div>,\n          state: null\n        },\n        broadcastTransaction: {\n          icon: 'fas fa-broadcast-tower',\n          description: <div>Broadcasting the reward claim transaction to the network.</div>,\n          state: null\n        }\n      }\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  getUnusedAddressIndex = () => this.props.account.addresses.filter(address => !address.isChange).length;\n\n  getUnusedAddress = () => getAddress(this.props.account.externalNode.derive(this.getUnusedAddressIndex()).publicKey);\n\n  getOutputs = () => {\n    const {\n      balance,\n      claimableAmount,\n      serviceFee,\n    } = this.props.account;\n\n    const outputs = [\n      {address: this.getUnusedAddress(), value: (balance + claimableAmount)}\n    ];\n\n    if (serviceFee > 0) {\n      outputs.push({address: SERVICE_FEE_ADDRESS, value: serviceFee})\n    }\n\n    return outputs;\n  };\n\n  claimRewards = async () => {\n    const {\n      accountIndex,\n      utxos,\n    } = this.props.account;\n\n    this.setState(prevState => ({\n      ...this.initialState,\n      isClaimingRewards: true,\n    }));\n\n    let currentAction;\n    try {\n      currentAction = 'connect';\n      updateActionState(this, currentAction, 'loading');\n      const ledgerIsAvailable = await ledger.isAvailable();\n      if (!ledgerIsAvailable) {\n        throw new Error('Ledger device is unavailable!');\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'confirmAddress';\n      updateActionState(this, currentAction, 'loading');\n      const unusedAddress = this.getUnusedAddress();\n      const derivationPath = `44'/141'/${accountIndex}'/0/${this.getUnusedAddressIndex()}`;\n      const verify = true;\n      const ledgerUnusedAddress = await ledger.getAddress(derivationPath, verify);\n      if(ledgerUnusedAddress !== unusedAddress) {\n        throw new Error(`Ledger derived address \"${ledgerUnusedAddress}\" doesn't match browser derived address \"${unusedAddress}\"`);\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'approveTransaction';\n      updateActionState(this, currentAction, 'loading');\n      const outputs = this.getOutputs();\n      const rewardClaimTransaction = await ledger.createTransaction(utxos, outputs);\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'broadcastTransaction';\n      updateActionState(this, currentAction, 'loading');\n      const result = await blockchain.broadcast(rewardClaimTransaction);\n      updateActionState(this, currentAction, true);\n\n      // this.props.handleRewardClaim();\n\n      this.setState({...this.initialState});\n    } catch (error) {\n      updateActionState(this, currentAction, false);\n      this.setState({error: error.message});\n    }\n  };\n\n  render() {\n    const {isClaimingRewards, actions, error} = this.state;\n    const isClaimableAmount = (this.props.account.claimableAmount > 0);\n    const [userOutput, feeOutput] = this.getOutputs();\n\n    return (\n      <>\n        <button className=\"button is-primary\" disabled={!isClaimableAmount} onClick={this.claimRewards}>\n          {this.props.children}\n        </button>\n        <ActionListModal\n          title=\"Claiming Rewards\"\n          actions={actions}\n          error={error}\n          handleClose={this.resetState}\n          show={isClaimingRewards}>\n          <p>\n            You should receive a total of <strong>{humanReadableSatoshis(userOutput.value)} KMD</strong> to the new unused address: <strong>{userOutput.address}</strong><br />\n            {feeOutput ? (\n              <>There will also be a {SERVICE_FEE_PERCENT}% service fee of <strong>{humanReadableSatoshis(feeOutput.value)} KMD</strong> to: <strong>{feeOutput.address}</strong></>\n            ) : null}\n          </p>\n        </ActionListModal>\n      </>\n    );\n  }\n}\n\nexport default ClaimRewardsButton;\n","import React from 'react';\nimport Utxos from './Utxos';\nimport ClaimRewardsButton from './ClaimRewardsButton';\nimport {SERVICE_FEE_PERCENT, TX_FEE} from './constants';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport './Accounts.scss';\nimport './Account.scss';\n\nclass Account extends React.Component {\n  render() {\n    const {account, tiptime} = this.props;\n    const {\n      accountIndex,\n      utxos,\n      balance,\n      rewards,\n      claimableAmount,\n      serviceFee\n    } = account;\n\n    const isClaimableAmount = (claimableAmount > 0);\n\n    return (\n      <div className=\"Account column is-full\">\n        <div className=\"box\">\n          <div className=\"content\">\n            <h2>\n              Account {accountIndex + 1}\n              <div className=\"balance\">\n                {humanReadableSatoshis(balance)} KMD\n              </div>\n              <small>\n                + {humanReadableSatoshis(Math.max(0, claimableAmount))} KMD Claimable Rewards\n              </small>\n            </h2>\n            <h4>UTXOs</h4>\n            <Utxos utxos={utxos} tiptime={tiptime} />\n            {isClaimableAmount && (\n              <>\n                <h4>Breakdown</h4>\n                <table className=\"breakdown\">\n                  <tbody>\n                    <tr>\n                      <td>{humanReadableSatoshis(rewards)} KMD</td>\n                      <td>Rewards accrued</td>\n                    </tr>\n                    <tr>\n                      <td>{humanReadableSatoshis(serviceFee)} KMD</td>\n                      <td>{SERVICE_FEE_PERCENT}% service fee</td>\n                    </tr>\n                    <tr>\n                      <td>{humanReadableSatoshis(TX_FEE)} KMD</td>\n                      <td>Network transaction fee</td>\n                    </tr>\n                    <tr>\n                      <td><strong>{humanReadableSatoshis(claimableAmount)} KMD</strong></td>\n                      <td>Total claimable amount</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </>\n            )}\n            <ClaimRewardsButton account={account}>\n              Claim Rewards\n            </ClaimRewardsButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Accounts = ({accounts, tiptime}) => (\n  <div className=\"Accounts\">\n    <div className=\"container\">\n      <div className=\"columns is-multiline\">\n        {accounts.map((account) => (\n          <Account\n            key={account.accountIndex}\n            account={account}\n            tiptime={tiptime}\n            />\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nexport default Accounts;\n","import ledger from './ledger';\nimport blockchain from './blockchain';\nimport getAddress from './get-address';\nimport bitcoin from 'bitcoinjs-lib';\n\nconst walkDerivationPath = async node => {\n  const addressConcurrency = 10;\n  const gapLimit = 20;\n  const addresses = [];\n  let consecutiveUnusedAddresses = 0;\n  let addressIndex = 0;\n\n  while (consecutiveUnusedAddresses < gapLimit) {\n    const addressApiRequests = [];\n\n    for (let i = 0; i < addressConcurrency; i++) {\n      const address = getAddress(node.derive(addressIndex).publicKey);\n\n      addressApiRequests.push(blockchain.getAddress(address));\n      addresses.push({address, addressIndex});\n\n      addressIndex++;\n    }\n\n    for (const address of await Promise.all(addressApiRequests)) {\n      if (address.totalReceived > 0 || address.unconfirmedBalance > 0) {\n        consecutiveUnusedAddresses = 0;\n      } else {\n        consecutiveUnusedAddresses++;\n      }\n    }\n  }\n\n  return addresses.slice(0, addresses.length - consecutiveUnusedAddresses);\n};\n\nconst getAccountAddresses = async account => {\n  const derivationPath = `44'/141'/${account}'`;\n  const xpub = await ledger.getXpub(derivationPath);\n  const node = bitcoin.bip32.fromBase58(xpub);\n  const externalNode = node.derive(0);\n  const internalNode = node.derive(1);\n\n  const [externalAddresses, internalAddresses] = await Promise.all([\n    walkDerivationPath(externalNode),\n    walkDerivationPath(internalNode)\n  ]);\n\n  const addAddressMeta = ({isChange}) => {\n    return address => ({\n      ...address,\n      account,\n      isChange,\n      derivationPath: `${derivationPath}/${isChange ? 1 : 0}/${address.addressIndex}`\n    });\n  };\n\n  const addresses = [\n    ...externalAddresses.map(addAddressMeta({isChange: false})),\n    ...internalAddresses.map(addAddressMeta({isChange: true}))\n  ];\n\n  return {\n    externalNode,\n    internalNode,\n    addresses\n  };\n};\n\nconst getAddressUtxos = async addresses => {\n  const utxos = await blockchain.getUtxos(addresses.map(a => a.address));\n\n  return await Promise.all(utxos.map(async utxo => {\n    const addressInfo = addresses.find(a => a.address === utxo.address);\n\n    const [{rawtx}, {locktime}] = await Promise.all([\n      blockchain.getRawTransaction(utxo.txid),\n      blockchain.getTransaction(utxo.txid)\n    ]);\n\n    return {\n      id: `${utxo.txid}:${utxo.vout}`,\n      ...addressInfo,\n      ...utxo,\n      locktime,\n      rawtx\n    };\n  }));\n};\n\nconst accountDiscovery = async () => {\n  const accounts = [];\n\n  let accountIndex = 0;\n  while (true) {\n    const account = await getAccountAddresses(accountIndex);\n\n    if (account.addresses.length === 0) {\n      break;\n    }\n\n    account.utxos = await getAddressUtxos(account.addresses);\n    account.accountIndex = accountIndex;\n\n    accounts.push(account);\n    accountIndex++;\n  }\n\n  return accounts;\n};\n\nexport default accountDiscovery;\n","import React from 'react';\nimport ledger from './lib/ledger';\nimport accountDiscovery from './lib/account-discovery';\nimport blockchain from './lib/blockchain';\nimport getKomodoRewards from './lib/get-komodo-rewards';\nimport updateActionState from './lib/update-action-state';\nimport {SERVICE_FEE_PERCENT, TX_FEE} from './constants';\nimport ActionListModal from './ActionListModal';\n\nclass CheckRewardsButton extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      isCheckingRewards: false,\n      error: false,\n      actions: {\n        connect: {\n          icon: 'fab fa-usb',\n          description: <div>Connect and unlock your Ledger, then open the Komodo app on your device.</div>,\n          state: null\n        },\n        approve: {\n          icon: 'fas fa-microchip',\n          description: <div>Approve all public key export requests on your device. <strong>There will be multiple requests</strong>.</div>,\n          state: null\n        }\n      }\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  calculateRewardData = ({accounts, tiptime}) => accounts.map(account => {\n    account.balance = account.utxos.reduce((balance, utxo) => balance + utxo.satoshis, 0);\n    account.rewards = account.utxos.reduce((rewards, utxo) => rewards + getKomodoRewards({tiptime, ...utxo}), 0);\n    account.serviceFee = Math.floor((account.rewards / 100) * SERVICE_FEE_PERCENT);\n    account.claimableAmount = account.rewards - account.serviceFee - TX_FEE;\n\n    return account;\n  });\n\n  scanAddresses = async () => {\n    this.props.handleRewardData({\n      accounts: [],\n      tiptime: []\n    });\n\n    this.setState({\n      ...this.initialState,\n      isCheckingRewards: true,\n    });\n\n    let currentAction;\n    try {\n      currentAction = 'connect';\n      updateActionState(this, currentAction, 'loading');\n      const ledgerIsAvailable = await ledger.isAvailable();\n      if (!ledgerIsAvailable) {\n        throw new Error('Ledger device is unavailable!');\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'approve';\n      updateActionState(this, currentAction, 'loading');\n      let [accounts, tiptime] = await Promise.all([\n        accountDiscovery(),\n        blockchain.getTipTime()\n      ]);\n\n      accounts = this.calculateRewardData({accounts, tiptime});\n      updateActionState(this, currentAction, true);\n\n      this.props.handleRewardData({\n        accounts,\n        tiptime\n      });\n\n      this.setState({...this.initialState});\n    } catch (error) {\n      updateActionState(this, currentAction, false);\n      this.setState({error: error.message});\n    }\n  };\n\n  render() {\n    const {isCheckingRewards, actions, error} = this.state;\n\n    return (\n      <>\n        <button className=\"button is-primary\" onClick={this.scanAddresses}>\n          {this.props.children}\n        </button>\n        <ActionListModal\n          title=\"Scanning Blockchain for Rewards\"\n          actions={actions}\n          error={error}\n          handleClose={this.resetState}\n          show={isCheckingRewards}>\n          <p>\n            Exporting public keys from your Ledger device, scanning the blockchain for funds, and calculating any claimable rewards. Please approve any public key export requests on your device.\n          </p>\n        </ActionListModal>\n      </>\n    );\n  }\n\n}\n\nexport default CheckRewardsButton;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import {INSIGHT_API_URL} from '../constants';\n\nconst get = async (endpoint, postData) => {\n  const opts = {};\n\n  if (postData) {\n    opts.body = JSON.stringify(postData);\n    opts.headers = new Headers();\n    opts.headers.append('Content-Type', 'application/json');\n    opts.headers.append('Content-Length', opts.body.length);\n    opts.method = 'POST';\n  }\n\n  const response = await fetch(`${INSIGHT_API_URL}${endpoint}`, opts);\n  const isJson = response.headers.get('Content-Type').includes('application/json');\n\n  const body = isJson ? await response.json() : await response.text();\n\n  if (!response.ok) {\n    throw new Error(body);\n  }\n\n  return body;\n};\n\nconst getAddress = address => get(`addr/${address}/?noTxList=1`);\n\nconst getUtxos = addresses => get(`addrs/utxo`, {addrs: addresses.join(',')});\n\nconst getTransaction = txid => get(`tx/${txid}`);\n\nconst getRawTransaction = txid => get(`rawtx/${txid}`);\n\nconst getBestBlockHash = () => get('status?q=getBestBlockHash');\n\nconst getBlock = blockHash => get(`block/${blockHash}`);\n\nconst getTipTime = async () => {\n  const {bestblockhash} = await getBestBlockHash();\n  const block = await getBlock(bestblockhash);\n\n  return block.time;\n}\n\nconst broadcast = transaction => get('tx/send', {rawtx: transaction});\n\nconst blockchain = {\n  get,\n  getAddress,\n  getUtxos,\n  getTransaction,\n  getRawTransaction,\n  getBestBlockHash,\n  getBlock,\n  getTipTime,\n  broadcast\n};\n\nexport default blockchain;\n","import TransportU2F from '@ledgerhq/hw-transport-u2f';\nimport Btc from '@ledgerhq/hw-app-btc';\nimport buildOutputScript from 'build-output-script';\nimport bip32Path from 'bip32-path';\nimport createXpub from 'create-xpub';\n\nconst getDevice = async () => {\n  const transport = await TransportU2F.create();\n  const ledger = new Btc(transport);\n\n  ledger.close = () => transport.close();\n\n  return ledger;\n};\n\nconst isAvailable = async () => {\n  const ledger = await getDevice();\n  try {\n    await ledger.getWalletPublicKey(`m/44'/0'/0'/0/0`);\n    await ledger.close();\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getAddress = async (derivationPath, verify) => {\n  const ledger = await getDevice();\n  const {bitcoinAddress} = await ledger.getWalletPublicKey(derivationPath, verify);\n  await ledger.close();\n\n  return bitcoinAddress;\n};\n\nconst createTransaction = async function(utxos, outputs) {\n  const ledger = await getDevice();\n\n  const inputs = await Promise.all(utxos.map(async utxo => {\n    const tx = await ledger.splitTransaction(utxo.rawtx);\n    return [tx, utxo.vout];\n  }));\n  const associatedKeysets = utxos.map(utxo => utxo.derivationPath);\n  const changePath = undefined;\n  const outputScript = buildOutputScript(outputs);\n  // const unixtime = Math.floor(Date.now() / 1000);\n  // const lockTime = (unixtime - 777);\n  const lockTime = undefined;\n  const sigHashType = undefined;\n  const segwit = undefined;\n  const initialTimestamp = undefined;\n  const additionals = ['sapling'];\n  const expiryHeight = undefined;\n\n  const transaction = await ledger.createPaymentTransactionNew(\n    inputs,\n    associatedKeysets,\n    changePath,\n    outputScript,\n    lockTime,\n    sigHashType,\n    segwit,\n    initialTimestamp,\n    additionals,\n    expiryHeight\n  );\n\n  await ledger.close();\n\n  return transaction;\n};\n\nconst getXpub = async derivationPath => {\n  const ledger = await getDevice();\n  const {publicKey, chainCode} = await ledger.getWalletPublicKey(derivationPath);\n  const pathArray = bip32Path.fromString(derivationPath).toPathArray();\n  const depth = pathArray.length;\n  const childNumber = ((0x80000000 | pathArray.pop()) >>> 0);\n  const xpub = createXpub({\n    depth,\n    childNumber,\n    publicKey,\n    chainCode\n  });\n  await ledger.close();\n\n  return xpub;\n};\n\nconst ledger = {\n  getDevice,\n  isAvailable,\n  getAddress,\n  createTransaction,\n  getXpub\n};\n\nexport default ledger;\n","import {KOMODO} from './../constants';\nimport bitcoin from 'bitcoinjs-lib';\n\nconst getAddress = publicKey => bitcoin.payments.p2pkh({\n  pubkey: publicKey,\n  network: KOMODO\n}).address;\n\nexport default getAddress;\n","const KOMODO_ENDOFERA = 7777777;\nconst LOCKTIME_THRESHOLD = 500000000;\nconst MIN_SATOSHIS = 1000000000;\nconst ONE_MONTH_CAP_HARDFORK = 1000000;\nconst ONE_HOUR = 60;\nconst ONE_MONTH = 31 * 24 * 60;\nconst ONE_YEAR = 365 * 24 * 60;\nconst DEVISOR = 10512000;\n\nconst getKomodoRewards = ({tiptime, locktime, height, satoshis}) => {\n  // Calculate coinage\n  const coinage = Math.floor((tiptime - locktime) / ONE_HOUR);\n\n  // Return early if UTXO is not eligible for rewards\n  if (\n    (height >= KOMODO_ENDOFERA) ||\n    (locktime < LOCKTIME_THRESHOLD) ||\n    (satoshis < MIN_SATOSHIS) ||\n    (coinage < ONE_HOUR) ||\n    (!height)\n  ) {\n    return 0;\n  }\n\n  // Cap reward periods\n  const limit = (height >= ONE_MONTH_CAP_HARDFORK) ? ONE_MONTH : ONE_YEAR;\n  let rewardPeriod = Math.min(coinage, limit);\n\n  // The first hour of coinage should not accrue rewards\n  rewardPeriod -= 59;\n\n  // Calculate rewards\n  const rewards = Math.floor(satoshis / DEVISOR) * rewardPeriod;\n\n  // Ensure reward value is never negative\n  if (rewards < 0) {\n    throw new Error('Reward should never be negative');\n  }\n\n  return rewards;\n};\n\nexport default getKomodoRewards;\n","import React from 'react';\nimport Modal from './Modal';\nimport Boolean from './Boolean';\nimport './ActionListModal.scss';\n\nconst ActionListModal = ({children, actions = [], error, ...modalProps}) => (\n  <div className=\"ActionListModal\">\n    <Modal isCloseable={error} {...modalProps}>\n      {children}\n      <div className=\"panel\">\n        {Object.keys(actions).map(action => {\n          const {icon, description, state} = actions[action];\n\n          return (\n            <div key={action} className={`panel-block ${state === 'loading' ? 'is-active' : ''}`}>\n              <span className=\"left-icon icon has-text-grey\">\n                <i className={icon}></i>\n              </span>\n                {description}\n              <div className=\"right-icon\">\n                {typeof state === 'boolean' ? (\n                  <Boolean value={state} />\n                ) : state === 'loading' ? (\n                  <span className=\"icon has-text-grey\">\n                    <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\"></i>\n                  </span>\n                ) : null}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {error ? (\n        <div className=\"notification is-danger\">\n          <strong>Error</strong>\n          <p>{error}</p>\n        </div>\n      ) : null}\n    </Modal>\n  </div>\n);\n\nexport default ActionListModal;\n","import React from 'react';\nimport './Modal.scss';\n\nconst Modal = ({children, title, show, isCloseable, handleClose}) => (\n  <div className={`Modal modal ${show ? 'is-active' : ''}`}>\n    <div onClick={() => isCloseable && handleClose && handleClose()}>\n      <div className=\"modal-background\"></div>\n      <button className={`modal-close is-large ${!isCloseable ? 'is-invisible' : ''}`}></button>\n    </div>\n    <div className=\"modal-content\">\n      <div className=\"card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">\n            {title}\n          </p>\n        </header>\n        <div className=\"card-content\">\n          <div className=\"content\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Modal;\n","import React from 'react';\n\nconst Boolean = ({value}) => (\n  <span className={`icon has-text-${value ? 'success' : 'danger'}`}>\n    <i className={`fas fa-${value ? 'check' : 'times'}-circle`}></i>\n  </span>\n);\n\nexport default Boolean;\n"],"sourceRoot":""}