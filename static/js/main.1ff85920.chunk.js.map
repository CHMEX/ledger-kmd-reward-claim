{"version":3,"sources":["lib/update-action-state.js","constants.js","App.js","Header.js","WarnU2fCompatibility.js","Footer.js","lib/human-readable-satoshis.js","lib/get-reward-end-date.js","lib/human-reward-end-date.js","Utxos.js","TxidLink.js","ClaimRewardsButton.js","Accounts.js","lib/account-discovery.js","CheckRewardsButton.js","index.js","lib/blockchain.js","lib/ledger.js","lib/get-address.js","lib/get-komodo-rewards.js","ActionListModal.js","Modal.js","Boolean.js"],"names":["updateActionState","context","action","value","setState","prevState","Object","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","actions","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","state","__webpack_require__","d","__webpack_exports__","SERVICE_FEE_ADDRESS","SERVICE_FEE_PERCENT","TX_FEE","INSIGHT_API_URL","INSIGHT_EXPLORER_URL","KOMODO","messagePrefix","bip32","public","private","pubKeyHash","scriptHash","wif","App","_this","initialState","resetState","handleRewardData","_ref","accounts","tiptime","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_Header__WEBPACK_IMPORTED_MODULE_8__","_CheckRewardsButton__WEBPACK_IMPORTED_MODULE_9__","this","disabled","isEqual","onClick","length","src","alt","_Accounts__WEBPACK_IMPORTED_MODULE_10__","_WarnU2fCompatibility__WEBPACK_IMPORTED_MODULE_11__","_Footer__WEBPACK_IMPORTED_MODULE_12__","target","rel","href","concat","repository","React","Component","hot","module","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_svgr_webpack_prettier_svgo_cryptocurrency_icons_svg_color_kmd_svg__WEBPACK_IMPORTED_MODULE_1__","Header","children","role","aria-label","WarnU2fCompatibility","u2fSupported","isSupported","react__WEBPACK_IMPORTED_MODULE_7___default","_Modal__WEBPACK_IMPORTED_MODULE_9__","title","show","Footer","humanReadableSatoshis","satoshis","scientificToDecimal","toBitcoin","getRewardEndDate","locktime","height","humanRewardEndDate","utxo","endDate","getRewardEndDateTimestamp","distanceInWordsToNow","addSuffix","Utxos","utxos","headings","react_default","map","heading","key","id","address","Boolean","getKomodoRewards","objectSpread","TxidLink","txid","ClaimRewardsButton","getUnusedAddressIndex","props","account","addresses","filter","isChange","getUnusedAddress","getAddress","externalNode","derive","publicKey","getOutputs","_this$props$account","balance","claimableAmount","serviceFee","outputs","push","claimRewards","_callee","_this$props$account2","accountIndex","currentAction","unusedAddress","derivationPath","ledgerUnusedAddress","rewardClaimTransaction","_ref2","regenerator_default","wrap","_context","prev","next","isClaimingRewards","assertThisInitialized","ledger","isAvailable","sent","Error","createTransaction","blockchain","broadcast","handleRewardClaim","success","Fragment","src_TxidLink","t0","error","message","stop","isClaimableAmount","_this$getOutputs","_this$getOutputs2","slicedToArray","userOutput","feeOutput","isClaimed","ActionListModal","assign","handleClose","connect","icon","description","confirmAddress","approveTransaction","broadcastTransaction","Account","claimTxid","_this$props","rewards","_this$state","Math","max","src_Utxos","src_ClaimRewardsButton","Accounts","Accounts_Account","walkDerivationPath","asyncToGenerator","mark","node","addressConcurrency","gapLimit","consecutiveUnusedAddresses","addressIndex","addressApiRequests","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_address","undefined","Promise","all","Symbol","iterator","done","totalReceived","unconfirmedBalance","t1","return","finish","abrupt","slice","_x","apply","arguments","getAccountAddresses","_callee2","xpub","internalNode","_ref3","_ref4","externalAddresses","internalAddresses","addAddressMeta","_context2","getXpub","bitcoin","fromBase58","_ref5","toConsumableArray","_x2","getAddressUtxos","_ref6","_callee4","_context4","getUtxos","_ref7","_callee3","addressInfo","_ref8","_ref9","rawtx","_context3","find","getRawTransaction","getTransaction","vout","_x4","_x3","accountDiscovery","_ref10","_callee5","_context5","CheckRewardsButton","calculateRewardData","reduce","floor","scanAddresses","isCheckingRewards","getTipTime","approve","r","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_4__","ReactDOM","render","document","getElementById","get","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","endpoint","postData","opts","response","body","JSON","stringify","headers","Headers","append","method","fetch","includes","json","text","ok","getBestBlockHash","getBlock","blockHash","bestblockhash","block","time","addrs","join","transaction","getDevice","transport","TransportU2F","create","Btc","close","getWalletPublicKey","verify","bitcoinAddress","inputs","associatedKeysets","outputScript","unixtime","lockTime","additionals","expiryHeight","transactionHex","tx","splitTransaction","_x5","buildOutputScript","Date","now","Buffer","from","createPaymentTransactionNew","_callee6","chainCode","pathArray","depth","childNumber","_context6","bip32Path","fromString","toPathArray","pop","createXpub","_x6","_constants__WEBPACK_IMPORTED_MODULE_0__","bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_1__","bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_1___default","payments","p2pkh","pubkey","network","coinage","limit","rewardPeriod","min","_ref$actions","modalProps","_Users_lukechilds_dev_oss_ledger_kmd_rewards_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","_Modal__WEBPACK_IMPORTED_MODULE_2__","isCloseable","keys","_actions$action","_Boolean__WEBPACK_IMPORTED_MODULE_3__","aria-hidden","Modal"],"mappings":"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","file":"static/js/main.1ff85920.chunk.js","sourcesContent":["const updateActionState = (context, action, value) => {\n  context.setState(prevState => ({\n    ...prevState,\n    actions: {\n      ...prevState.actions,\n      [action]: {\n        ...prevState.actions[action],\n        state: value\n      }\n    }\n  }));\n};\nexport default updateActionState;\n","export const SERVICE_FEE_ADDRESS = 'RQzv9tVzCHXN9j3kF5qNzms555zzLC9HQF';\nexport const SERVICE_FEE_PERCENT = 5;\nexport const TX_FEE = 20000;\nexport const INSIGHT_API_URL = 'https://insight.hyperdex.app/insight-api-komodo/';\nexport const INSIGHT_EXPLORER_URL = 'https://kmdexplorer.io/';\nexport const KOMODO = {\n  messagePrefix: '\\x18Komodo Signed Message:\\n',\n  bip32: {\n    public: 0x0488B21E,\n    private: 0x0488ADE4\n  },\n  pubKeyHash: 0x3C,\n  scriptHash: 0x55,\n  wif: 0xBC\n};\n","import React from 'react';\nimport {hot} from 'react-hot-loader';\nimport {isEqual} from 'lodash';\nimport Header from './Header';\nimport CheckRewardsButton from './CheckRewardsButton';\nimport Accounts from './Accounts';\nimport WarnU2fCompatibility from './WarnU2fCompatibility';\nimport Footer from './Footer';\nimport {repository} from '../package.json';\nimport './App.scss';\n\nclass App extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      accounts: [],\n      tiptime: null\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  handleRewardData = ({accounts, tiptime}) => {\n    this.setState({accounts, tiptime});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header>\n          <div className=\"buttons\">\n            <CheckRewardsButton handleRewardData={this.handleRewardData}>\n              <strong>Check Rewards</strong>\n            </CheckRewardsButton>\n            <button className=\"button is-light\" disabled={isEqual(this.state, this.initialState)} onClick={this.resetState}>\n              Reset\n            </button>\n          </div>\n        </Header>\n\n        <section className=\"main\">\n          {this.state.accounts.length === 0 ? (\n            <img className=\"ledger-graphic\" src=\"ledger.svg\" alt=\"Ledger Nano S\"/>\n          ) : (\n            <Accounts {...this.state} />\n          )}\n        </section>\n\n        <WarnU2fCompatibility />\n\n        <Footer>\n          <p>\n            <strong>Ledger KMD Reward Claim</strong> by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/atomiclabs\">Atomic Labs</a>.\n            The <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/${repository}`}>source code</a> is licensed under <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/${repository}/blob/master/LICENSE`}>MIT</a>.\n          </p>\n        </Footer>\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","import React from 'react';\nimport { ReactComponent as KmdIcon } from 'cryptocurrency-icons/svg/color/kmd.svg';\nimport './Header.scss';\n\nconst Header = ({children}) => (\n  <nav className=\"Header navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n    <div className=\"container\">\n\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item\">\n          <KmdIcon className=\"KmdIcon\"/>\n        </div>\n        <h1 className=\"navbar-item\">\n          <strong>Ledger KMD Reward Claim</strong>\n        </h1>\n      </div>\n\n      <div className=\"navbar-menu\">\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            {children}\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </nav>\n);\n\nexport default Header;\n","import React from 'react';\nimport {isSupported} from 'u2f-api';\nimport Modal from './Modal';\n\nclass WarnU2fCompatibility extends React.Component {\n  state = {\n    u2fSupported: null\n  };\n\n  async componentDidMount() {\n    this.setState({u2fSupported: await isSupported()});\n  }\n\n  render() {\n    return (\n      <Modal title=\"Warning: U2F Not Supported in This Browser\" show={this.state.u2fSupported === false}>\n        <p>The U2F API is required for the web browser to communicate with the Ledger device.</p>\n        <p>Try using Chrome or Opera instead.</p>\n        <p>You can view a list of U2F supporting browsers at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://caniuse.com/#feat=u2f\">caniuse.com/#feat=u2f</a>.</p>\n      </Modal>\n    );\n  }\n}\n\nexport default WarnU2fCompatibility;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = ({children}) => (\n  <footer className=\"Footer\">\n    <div className=\"content has-text-centered\">\n      {children}\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import {toBitcoin} from 'satoshi-bitcoin';\nimport scientificToDecimal from 'scientific-to-decimal';\n\nconst humanReadableSatoshis = satoshis => scientificToDecimal(toBitcoin(satoshis));\n\nexport default humanReadableSatoshis;\n","const KOMODO_ENDOFERA = 7777777;\nconst LOCKTIME_THRESHOLD = 500000000;\nconst ONE_MONTH_CAP_HARDFORK = 1000000;\nconst ONE_SECOND = 1000;\nconst ONE_MONTH = 31 * 24 * 60 * 60 * ONE_SECOND;\nconst ONE_YEAR = 365 * 24 * 60 * 60 * ONE_SECOND;\n\nconst getRewardEndDate = ({locktime, height}) => {\n  // Return false if UTXO for rewards\n  if (\n    (height >= KOMODO_ENDOFERA) ||\n    (locktime < LOCKTIME_THRESHOLD) ||\n    (!height)\n  ) {\n    return false;\n  }\n\n  // Convert locktime to milliseconds\n  locktime = (locktime * ONE_SECOND);\n\n  // Get reward period\n  const rewardPeriod = (height >= ONE_MONTH_CAP_HARDFORK) ? ONE_MONTH : ONE_YEAR;\n\n  return locktime + rewardPeriod;\n};\n\nexport default getRewardEndDate;\n","import {distanceInWordsToNow} from 'date-fns';\nimport getRewardEndDateTimestamp from './get-reward-end-date';\n\nconst humanRewardEndDate = utxo => {\n  const endDate = getRewardEndDateTimestamp(utxo);\n\n  return endDate ? distanceInWordsToNow(endDate, {addSuffix: true}) : 'N/A';\n};\n\nexport default humanRewardEndDate;\n","import React from 'react';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport getKomodoRewards from './lib/get-komodo-rewards';\nimport humanRewardEndDate from './lib/human-reward-end-date';\nimport Boolean from './Boolean';\n\nconst Utxos = ({utxos, tiptime}) => {\n  const headings = ['Address', 'Value', 'Locktime', 'Rewards', 'Rewards Stop Accruing'];\n\n  return (\n    <table className=\"table is-striped\">\n      <thead>\n        <tr>\n          {headings.map(heading => <th key={heading}>{heading}</th>)}\n        </tr>\n      </thead>\n      <tfoot>\n        <tr>\n          {headings.map(heading => <th key={heading}>{heading}</th>)}\n        </tr>\n      </tfoot>\n      <tbody>\n        {utxos.map(utxo => (\n          <tr key={utxo.id} className=\"utxo\">\n            <th>{utxo.address}</th>\n            <td>{humanReadableSatoshis(utxo.satoshis)} KMD</td>\n            <td><Boolean value={utxo.locktime} /></td>\n            <td>{humanReadableSatoshis(getKomodoRewards({tiptime, ...utxo}))} KMD</td>\n            <td>{humanRewardEndDate(utxo)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Utxos;\n","import React from 'react';\nimport {INSIGHT_EXPLORER_URL} from './constants';\n\nconst TxidLink = ({txid}) => (\n  <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${INSIGHT_EXPLORER_URL}tx/${txid}`}>{txid}</a>\n);\n\nexport default TxidLink;\n","import React from 'react';\nimport ActionListModal from './ActionListModal';\nimport TxidLink from './TxidLink';\nimport ledger from './lib/ledger';\nimport blockchain from './lib/blockchain';\nimport getAddress from './lib/get-address';\nimport updateActionState from './lib/update-action-state';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport {SERVICE_FEE_PERCENT, SERVICE_FEE_ADDRESS} from './constants';\n\nclass ClaimRewardsButton extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      isClaimingRewards: false,\n      error: false,\n      success: false,\n      actions: {\n        connect: {\n          icon: 'fab fa-usb',\n          description: <div>Connect and unlock your Ledger, then open the Komodo app on your device.</div>,\n          state: null\n        },\n        confirmAddress: {\n          icon: 'fas fa-search-dollar',\n          description: <div>Confirm the address on your device matches the new unused address shown above.</div>,\n          state: null\n        },\n        approveTransaction: {\n          icon: 'fas fa-key',\n          description: <div>Approve the transaction on your device after carefully checking the values and addresses match those shown above.</div>,\n          state: null\n        },\n        broadcastTransaction: {\n          icon: 'fas fa-broadcast-tower',\n          description: <div>Broadcasting the reward claim transaction to the network.</div>,\n          state: null\n        }\n      }\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  getUnusedAddressIndex = () => this.props.account.addresses.filter(address => !address.isChange).length;\n\n  getUnusedAddress = () => getAddress(this.props.account.externalNode.derive(this.getUnusedAddressIndex()).publicKey);\n\n  getOutputs = () => {\n    const {\n      balance,\n      claimableAmount,\n      serviceFee,\n    } = this.props.account;\n\n    const outputs = [\n      {address: this.getUnusedAddress(), value: (balance + claimableAmount)}\n    ];\n\n    if (serviceFee > 0) {\n      outputs.push({address: SERVICE_FEE_ADDRESS, value: serviceFee})\n    }\n\n    return outputs;\n  };\n\n  claimRewards = async () => {\n    const {\n      accountIndex,\n      utxos,\n    } = this.props.account;\n\n    this.setState(prevState => ({\n      ...this.initialState,\n      isClaimingRewards: true,\n    }));\n\n    let currentAction;\n    try {\n      currentAction = 'connect';\n      updateActionState(this, currentAction, 'loading');\n      const ledgerIsAvailable = await ledger.isAvailable();\n      if (!ledgerIsAvailable) {\n        throw new Error('Ledger device is unavailable!');\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'confirmAddress';\n      updateActionState(this, currentAction, 'loading');\n      const unusedAddress = this.getUnusedAddress();\n      const derivationPath = `44'/141'/${accountIndex}'/0/${this.getUnusedAddressIndex()}`;\n      const verify = true;\n      const ledgerUnusedAddress = await ledger.getAddress(derivationPath, verify);\n      if(ledgerUnusedAddress !== unusedAddress) {\n        throw new Error(`Ledger derived address \"${ledgerUnusedAddress}\" doesn't match browser derived address \"${unusedAddress}\"`);\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'approveTransaction';\n      updateActionState(this, currentAction, 'loading');\n      const outputs = this.getOutputs();\n      const rewardClaimTransaction = await ledger.createTransaction(utxos, outputs);\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'broadcastTransaction';\n      updateActionState(this, currentAction, 'loading');\n      const {txid} = await blockchain.broadcast(rewardClaimTransaction);\n      updateActionState(this, currentAction, true);\n\n      this.props.handleRewardClaim(txid);\n      this.setState({\n        success: <>Claim TXID: <TxidLink txid={txid}/></>\n      });\n    } catch (error) {\n      updateActionState(this, currentAction, false);\n      this.setState({error: error.message});\n    }\n  };\n\n  render() {\n    const {isClaimingRewards} = this.state;\n    const isClaimableAmount = (this.props.account.claimableAmount > 0);\n    const [userOutput, feeOutput] = this.getOutputs();\n\n    return (\n      <>\n        <button className=\"button is-primary\" disabled={this.props.isClaimed || !isClaimableAmount} onClick={this.claimRewards}>\n          {this.props.children}\n        </button>\n        <ActionListModal\n          {...this.state}\n          title=\"Claiming Rewards\"\n          handleClose={this.resetState}\n          show={isClaimingRewards}>\n          <p>\n            You should receive a total of <strong>{humanReadableSatoshis(userOutput.value)} KMD</strong> to the new unused address: <strong>{userOutput.address}</strong><br />\n            {feeOutput ? (\n              <>There will also be a {SERVICE_FEE_PERCENT}% service fee of <strong>{humanReadableSatoshis(feeOutput.value)} KMD</strong> to: <strong>{feeOutput.address}</strong></>\n            ) : null}\n          </p>\n        </ActionListModal>\n      </>\n    );\n  }\n}\n\nexport default ClaimRewardsButton;\n","import React from 'react';\nimport Utxos from './Utxos';\nimport ClaimRewardsButton from './ClaimRewardsButton';\nimport TxidLink from './TxidLink';\nimport {SERVICE_FEE_PERCENT, TX_FEE} from './constants';\nimport humanReadableSatoshis from './lib/human-readable-satoshis';\nimport './Accounts.scss';\nimport './Account.scss';\n\nclass Account extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      isClaimed: false,\n      claimTxid: null\n    };\n  }\n\n  handleRewardClaim = txid => {\n    this.setState({\n      isClaimed: true,\n      claimTxid: txid\n    });\n  };\n\n  render() {\n    const {account, tiptime} = this.props;\n    const {\n      accountIndex,\n      utxos,\n      balance,\n      rewards,\n      claimableAmount,\n      serviceFee\n    } = account;\n\n    const isClaimableAmount = (claimableAmount > 0);\n    const {isClaimed, claimTxid} = this.state;\n\n    return (\n      <div className={`Account column is-full ${isClaimed ? 'is-claimed' : ''}`}>\n        <div className=\"box\">\n          <div className=\"content\">\n            <h2>\n              Account {accountIndex + 1}\n              <div className=\"balance\">\n                {humanReadableSatoshis(balance)} KMD\n              </div>\n              <small>\n                + {humanReadableSatoshis(Math.max(0, claimableAmount))} KMD Claimable Rewards\n              </small>\n            </h2>\n            {(utxos.length > 0) && (\n              <>\n                <h4>UTXOs</h4>\n                <Utxos utxos={utxos} tiptime={tiptime} />\n              </>\n            )}\n            {isClaimableAmount && (\n              <>\n                <h4>Breakdown</h4>\n                <table className=\"breakdown\">\n                  <tbody>\n                    <tr>\n                      <td>{humanReadableSatoshis(rewards)} KMD</td>\n                      <td>Rewards accrued</td>\n                    </tr>\n                    <tr>\n                      <td>{humanReadableSatoshis(serviceFee)} KMD</td>\n                      <td>{SERVICE_FEE_PERCENT}% service fee</td>\n                    </tr>\n                    <tr>\n                      <td>{humanReadableSatoshis(TX_FEE)} KMD</td>\n                      <td>Network transaction fee</td>\n                    </tr>\n                    <tr>\n                      <td><strong>{humanReadableSatoshis(claimableAmount)} KMD</strong></td>\n                      <td>Total claimable amount</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </>\n            )}\n            {(isClaimed && claimTxid) && (\n              <div className=\"is-pulled-right\">\n                Claim TXID: <TxidLink txid={claimTxid}/>\n              </div>\n            )}\n            <ClaimRewardsButton account={account} handleRewardClaim={this.handleRewardClaim} isClaimed={this.state.isClaimed}>\n              Claim Rewards\n            </ClaimRewardsButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Accounts = ({accounts, tiptime}) => (\n  <div className=\"Accounts\">\n    <div className=\"container\">\n      <div className=\"columns is-multiline\">\n        {accounts.map((account) => (\n          <Account\n            key={account.accountIndex}\n            account={account}\n            tiptime={tiptime}\n            />\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nexport default Accounts;\n","import ledger from './ledger';\nimport blockchain from './blockchain';\nimport getAddress from './get-address';\nimport bitcoin from 'bitcoinjs-lib';\n\nconst walkDerivationPath = async node => {\n  const addressConcurrency = 10;\n  const gapLimit = 20;\n  const addresses = [];\n  let consecutiveUnusedAddresses = 0;\n  let addressIndex = 0;\n\n  while (consecutiveUnusedAddresses < gapLimit) {\n    const addressApiRequests = [];\n\n    for (let i = 0; i < addressConcurrency; i++) {\n      const address = getAddress(node.derive(addressIndex).publicKey);\n\n      addressApiRequests.push(blockchain.getAddress(address));\n      addresses.push({address, addressIndex});\n\n      addressIndex++;\n    }\n\n    for (const address of await Promise.all(addressApiRequests)) {\n      if (address.totalReceived > 0 || address.unconfirmedBalance > 0) {\n        consecutiveUnusedAddresses = 0;\n      } else {\n        consecutiveUnusedAddresses++;\n      }\n    }\n  }\n\n  return addresses.slice(0, addresses.length - consecutiveUnusedAddresses);\n};\n\nconst getAccountAddresses = async account => {\n  const derivationPath = `44'/141'/${account}'`;\n  const xpub = await ledger.getXpub(derivationPath);\n  const node = bitcoin.bip32.fromBase58(xpub);\n  const externalNode = node.derive(0);\n  const internalNode = node.derive(1);\n\n  const [externalAddresses, internalAddresses] = await Promise.all([\n    walkDerivationPath(externalNode),\n    walkDerivationPath(internalNode)\n  ]);\n\n  const addAddressMeta = ({isChange}) => {\n    return address => ({\n      ...address,\n      account,\n      isChange,\n      derivationPath: `${derivationPath}/${isChange ? 1 : 0}/${address.addressIndex}`\n    });\n  };\n\n  const addresses = [\n    ...externalAddresses.map(addAddressMeta({isChange: false})),\n    ...internalAddresses.map(addAddressMeta({isChange: true}))\n  ];\n\n  return {\n    externalNode,\n    internalNode,\n    addresses\n  };\n};\n\nconst getAddressUtxos = async addresses => {\n  const utxos = await blockchain.getUtxos(addresses.map(a => a.address));\n\n  return await Promise.all(utxos.map(async utxo => {\n    const addressInfo = addresses.find(a => a.address === utxo.address);\n\n    const [{rawtx}, {locktime}] = await Promise.all([\n      blockchain.getRawTransaction(utxo.txid),\n      blockchain.getTransaction(utxo.txid)\n    ]);\n\n    return {\n      id: `${utxo.txid}:${utxo.vout}`,\n      ...addressInfo,\n      ...utxo,\n      locktime,\n      rawtx\n    };\n  }));\n};\n\nconst accountDiscovery = async () => {\n  const accounts = [];\n\n  let accountIndex = 0;\n  while (true) {\n    const account = await getAccountAddresses(accountIndex);\n\n    if (account.addresses.length === 0) {\n      break;\n    }\n\n    account.utxos = await getAddressUtxos(account.addresses);\n    account.accountIndex = accountIndex;\n\n    accounts.push(account);\n    accountIndex++;\n  }\n\n  return accounts;\n};\n\nexport default accountDiscovery;\n","import React from 'react';\nimport ledger from './lib/ledger';\nimport accountDiscovery from './lib/account-discovery';\nimport blockchain from './lib/blockchain';\nimport getKomodoRewards from './lib/get-komodo-rewards';\nimport updateActionState from './lib/update-action-state';\nimport {SERVICE_FEE_PERCENT, TX_FEE} from './constants';\nimport ActionListModal from './ActionListModal';\n\nclass CheckRewardsButton extends React.Component {\n  state = this.initialState;\n\n  get initialState() {\n    return {\n      isCheckingRewards: false,\n      error: false,\n      actions: {\n        connect: {\n          icon: 'fab fa-usb',\n          description: <div>Connect and unlock your Ledger, then open the Komodo app on your device.</div>,\n          state: null\n        },\n        approve: {\n          icon: 'fas fa-microchip',\n          description: <div>Approve all public key export requests on your device. <strong>There will be multiple requests</strong>.</div>,\n          state: null\n        }\n      }\n    };\n  }\n\n  resetState = () => this.setState(this.initialState);\n\n  calculateRewardData = ({accounts, tiptime}) => accounts.map(account => {\n    account.balance = account.utxos.reduce((balance, utxo) => balance + utxo.satoshis, 0);\n    account.rewards = account.utxos.reduce((rewards, utxo) => rewards + getKomodoRewards({tiptime, ...utxo}), 0);\n    account.serviceFee = Math.floor((account.rewards / 100) * SERVICE_FEE_PERCENT);\n    account.claimableAmount = account.rewards - account.serviceFee - TX_FEE;\n\n    return account;\n  });\n\n  scanAddresses = async () => {\n    this.props.handleRewardData({\n      accounts: [],\n      tiptime: []\n    });\n\n    this.setState({\n      ...this.initialState,\n      isCheckingRewards: true,\n    });\n\n    let currentAction;\n    try {\n      currentAction = 'connect';\n      updateActionState(this, currentAction, 'loading');\n      const ledgerIsAvailable = await ledger.isAvailable();\n      if (!ledgerIsAvailable) {\n        throw new Error('Ledger device is unavailable!');\n      }\n      updateActionState(this, currentAction, true);\n\n      currentAction = 'approve';\n      updateActionState(this, currentAction, 'loading');\n      let [accounts, tiptime] = await Promise.all([\n        accountDiscovery(),\n        blockchain.getTipTime()\n      ]);\n\n      accounts = this.calculateRewardData({accounts, tiptime});\n      updateActionState(this, currentAction, true);\n\n      this.props.handleRewardData({\n        accounts,\n        tiptime\n      });\n\n      this.setState({...this.initialState});\n    } catch (error) {\n      updateActionState(this, currentAction, false);\n      this.setState({error: error.message});\n    }\n  };\n\n  render() {\n    const {isCheckingRewards, actions, error} = this.state;\n\n    return (\n      <>\n        <button className=\"button is-primary\" onClick={this.scanAddresses}>\n          {this.props.children}\n        </button>\n        <ActionListModal\n          title=\"Scanning Blockchain for Rewards\"\n          actions={actions}\n          error={error}\n          handleClose={this.resetState}\n          show={isCheckingRewards}>\n          <p>\n            Exporting public keys from your Ledger device, scanning the blockchain for funds, and calculating any claimable rewards. Please approve any public key export requests on your device.\n          </p>\n        </ActionListModal>\n      </>\n    );\n  }\n\n}\n\nexport default CheckRewardsButton;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import {INSIGHT_API_URL} from '../constants';\n\nconst get = async (endpoint, postData) => {\n  const opts = {};\n\n  if (postData) {\n    opts.body = JSON.stringify(postData);\n    opts.headers = new Headers();\n    opts.headers.append('Content-Type', 'application/json');\n    opts.headers.append('Content-Length', opts.body.length);\n    opts.method = 'POST';\n  }\n\n  const response = await fetch(`${INSIGHT_API_URL}${endpoint}`, opts);\n  const isJson = response.headers.get('Content-Type').includes('application/json');\n\n  const body = isJson ? await response.json() : await response.text();\n\n  if (!response.ok) {\n    throw new Error(body);\n  }\n\n  return body;\n};\n\nconst getAddress = address => get(`addr/${address}/?noTxList=1`);\n\nconst getUtxos = addresses => get(`addrs/utxo`, {addrs: addresses.join(',')});\n\nconst getTransaction = txid => get(`tx/${txid}`);\n\nconst getRawTransaction = txid => get(`rawtx/${txid}`);\n\nconst getBestBlockHash = () => get('status?q=getBestBlockHash');\n\nconst getBlock = blockHash => get(`block/${blockHash}`);\n\nconst getTipTime = async () => {\n  const {bestblockhash} = await getBestBlockHash();\n  const block = await getBlock(bestblockhash);\n\n  return block.time;\n}\n\nconst broadcast = transaction => get('tx/send', {rawtx: transaction});\n\nconst blockchain = {\n  get,\n  getAddress,\n  getUtxos,\n  getTransaction,\n  getRawTransaction,\n  getBestBlockHash,\n  getBlock,\n  getTipTime,\n  broadcast\n};\n\nexport default blockchain;\n","import TransportU2F from '@ledgerhq/hw-transport-u2f';\nimport Btc from '@ledgerhq/hw-app-btc';\nimport buildOutputScript from 'build-output-script';\nimport bip32Path from 'bip32-path';\nimport createXpub from 'create-xpub';\n\nconst getDevice = async () => {\n  const transport = await TransportU2F.create();\n  const ledger = new Btc(transport);\n\n  ledger.close = () => transport.close();\n\n  return ledger;\n};\n\nconst isAvailable = async () => {\n  const ledger = await getDevice();\n  try {\n    await ledger.getWalletPublicKey(`m/44'/0'/0'/0/0`);\n    await ledger.close();\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getAddress = async (derivationPath, verify) => {\n  const ledger = await getDevice();\n  const {bitcoinAddress} = await ledger.getWalletPublicKey(derivationPath, verify);\n  await ledger.close();\n\n  return bitcoinAddress;\n};\n\nconst createTransaction = async function(utxos, outputs) {\n  const ledger = await getDevice();\n\n  const inputs = await Promise.all(utxos.map(async utxo => {\n    const transactionHex = utxo.rawtx;\n    const isSegwitSupported = undefined;\n    const hasTimestamp = undefined;\n    const hasExtraData = true;\n    const additionals = ['sapling'];\n    const tx = await ledger.splitTransaction(\n      transactionHex,\n      isSegwitSupported,\n      hasTimestamp,\n      hasExtraData,\n      additionals\n    );\n    return [tx, utxo.vout];\n  }));\n  const associatedKeysets = utxos.map(utxo => utxo.derivationPath);\n  const changePath = undefined;\n  const outputScript = buildOutputScript(outputs);\n  const unixtime = Math.floor(Date.now() / 1000);\n  const lockTime = (unixtime - 777);\n  const sigHashType = undefined;\n  const segwit = undefined;\n  const initialTimestamp = undefined;\n  const additionals = ['sapling'];\n  const expiryHeight = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\n  const transaction = await ledger.createPaymentTransactionNew(\n    inputs,\n    associatedKeysets,\n    changePath,\n    outputScript,\n    lockTime,\n    sigHashType,\n    segwit,\n    initialTimestamp,\n    additionals,\n    expiryHeight\n  );\n\n  await ledger.close();\n\n  return transaction;\n};\n\nconst getXpub = async derivationPath => {\n  const ledger = await getDevice();\n  const {publicKey, chainCode} = await ledger.getWalletPublicKey(derivationPath);\n  const pathArray = bip32Path.fromString(derivationPath).toPathArray();\n  const depth = pathArray.length;\n  const childNumber = ((0x80000000 | pathArray.pop()) >>> 0);\n  const xpub = createXpub({\n    depth,\n    childNumber,\n    publicKey,\n    chainCode\n  });\n  await ledger.close();\n\n  return xpub;\n};\n\nconst ledger = {\n  getDevice,\n  isAvailable,\n  getAddress,\n  createTransaction,\n  getXpub\n};\n\nexport default ledger;\n","import {KOMODO} from './../constants';\nimport bitcoin from 'bitcoinjs-lib';\n\nconst getAddress = publicKey => bitcoin.payments.p2pkh({\n  pubkey: publicKey,\n  network: KOMODO\n}).address;\n\nexport default getAddress;\n","const KOMODO_ENDOFERA = 7777777;\nconst LOCKTIME_THRESHOLD = 500000000;\nconst MIN_SATOSHIS = 1000000000;\nconst ONE_MONTH_CAP_HARDFORK = 1000000;\nconst ONE_HOUR = 60;\nconst ONE_MONTH = 31 * 24 * 60;\nconst ONE_YEAR = 365 * 24 * 60;\nconst DEVISOR = 10512000;\n\nconst getKomodoRewards = ({tiptime, locktime, height, satoshis}) => {\n  // Calculate coinage\n  const coinage = Math.floor((tiptime - locktime) / ONE_HOUR);\n\n  // Return early if UTXO is not eligible for rewards\n  if (\n    (height >= KOMODO_ENDOFERA) ||\n    (locktime < LOCKTIME_THRESHOLD) ||\n    (satoshis < MIN_SATOSHIS) ||\n    (coinage < ONE_HOUR) ||\n    (!height)\n  ) {\n    return 0;\n  }\n\n  // Cap reward periods\n  const limit = (height >= ONE_MONTH_CAP_HARDFORK) ? ONE_MONTH : ONE_YEAR;\n  let rewardPeriod = Math.min(coinage, limit);\n\n  // The first hour of coinage should not accrue rewards\n  rewardPeriod -= 59;\n\n  // Calculate rewards\n  const rewards = Math.floor(satoshis / DEVISOR) * rewardPeriod;\n\n  // Ensure reward value is never negative\n  if (rewards < 0) {\n    throw new Error('Reward should never be negative');\n  }\n\n  return rewards;\n};\n\nexport default getKomodoRewards;\n","import React from 'react';\nimport Modal from './Modal';\nimport Boolean from './Boolean';\nimport './ActionListModal.scss';\n\nconst ActionListModal = ({children, actions = [], error, success, ...modalProps}) => (\n  <div className=\"ActionListModal\">\n    <Modal isCloseable={error || success} {...modalProps}>\n      {children}\n      <div className=\"panel\">\n        {Object.keys(actions).map(action => {\n          const {icon, description, state} = actions[action];\n\n          return (\n            <div key={action} className={`panel-block ${state === 'loading' ? 'is-active' : ''}`}>\n              <span className=\"left-icon icon has-text-grey\">\n                <i className={icon}></i>\n              </span>\n                {description}\n              <div className=\"right-icon\">\n                {typeof state === 'boolean' ? (\n                  <Boolean value={state} />\n                ) : state === 'loading' ? (\n                  <span className=\"icon has-text-grey\">\n                    <i className=\"fas fa-circle-notch fa-spin\" aria-hidden=\"true\"></i>\n                  </span>\n                ) : null}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {error ? (\n        <div className=\"notification is-danger\">\n          <strong>Error</strong>\n          <p>{error}</p>\n        </div>\n      ) : null}\n\n      {success ? (\n        <div className=\"notification is-success\">\n          <strong>Success</strong>\n          <p>{success}</p>\n        </div>\n      ) : null}\n    </Modal>\n  </div>\n);\n\nexport default ActionListModal;\n","import React from 'react';\nimport './Modal.scss';\n\nconst Modal = ({children, title, show, isCloseable, handleClose}) => (\n  <div className={`Modal modal ${show ? 'is-active' : ''}`}>\n    <div onClick={() => isCloseable && handleClose && handleClose()}>\n      <div className=\"modal-background\"></div>\n      <button className={`modal-close is-large ${!isCloseable ? 'is-invisible' : ''}`}></button>\n    </div>\n    <div className=\"modal-content\">\n      <div className=\"card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">\n            {title}\n          </p>\n        </header>\n        <div className=\"card-content\">\n          <div className=\"content\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Modal;\n","import React from 'react';\n\nconst Boolean = ({value}) => (\n  <span className={`icon has-text-${value ? 'success' : 'danger'}`}>\n    <i className={`fas fa-${value ? 'check' : 'times'}-circle`}></i>\n  </span>\n);\n\nexport default Boolean;\n"],"sourceRoot":""}